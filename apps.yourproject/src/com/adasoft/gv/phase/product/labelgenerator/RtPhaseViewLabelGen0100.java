package com.adasoft.gv.phase.product.labelgenerator;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import com.adasoft.gv.phase.product.labelgenerator.service.LabelGeneratorService;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseMainView0200;
import com.rockwell.mes.commons.shared.phase.viewhelper.swing.LayoutHelper0201;

/**
 * TODO: Runtime phase view.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseViewLabelGen0100 extends AbstractPhaseMainView0200<RtPhaseModelLabelGen0100> {

    /** Comment for <code>serialVersionUID</code> */
    private static final long serialVersionUID = 1L;
    List<Label> labelsList = new ArrayList<>();
    
    JPanel layoutPanel = new JPanel();
    
    
    // Label name input field
    JLabel nameLabel = new JLabel("Name:");
    JTextField nameField = new JTextField(20);
    
    // Label description input field (as a text area)
    JLabel descriptionLabel = new JLabel("Description:");
    JTextArea descriptionField = new JTextArea(5, 30); // Rows, Columns
    
    // Label value input field
    JLabel valueLabel = new JLabel("Value:");
    JTextField valueField = new JTextField(10);
	protected Component createButton;
    
    
    /**
     * @param theModel The model of this view
     */
    protected RtPhaseViewLabelGen0100(final RtPhaseModelLabelGen0100 theModel) {
        super(theModel);
    }

    @Override
    protected String getNavigatorInfoColumn() {
        // TODO Auto-generated method stub
        return null;
    }

    @Override
    protected void createUI() {
        // CHECKSTYLE:MagicNumber:off (Reason: Columns, rows and width up to 3 ...)

        setOpaque(false);
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbConstraints = new GridBagConstraints();

        gbConstraints.anchor = GridBagConstraints.FIRST_LINE_START;
        LayoutHelper0201.setGBConstraints(gbConstraints, 0, 0, 3, 1);
        add(createInstructionPanel(getModel().getInstructionTextColumn1(), LayoutHelper0201.calculatePreferredWidth(gbConstraints)), gbConstraints);

        LayoutHelper0201.setGBConstraints(gbConstraints, 0, 1, 3, 1);
        add(createActionPanel(LayoutHelper0201.calculatePreferredWidth(gbConstraints)),
                gbConstraints);

        gbConstraints.anchor = GridBagConstraints.PAGE_END;
        LayoutHelper0201.setGBConstraints(gbConstraints, 3, 1, 1, 1);
        add(createConfirmPanel(), gbConstraints);

        // CHECKSTYLE:MagicNumber:on
    }

    /**
     * @param preferredWidth the preferred width.
     * @return The action panel
     */
    protected Component createActionPanel(int preferredWidth) {
        JPanel layoutPanel = PhaseSwingHelper.createPanel();
        layoutPanel.setLayout(new BoxLayout(layoutPanel, BoxLayout.Y_AXIS));

        // Create a vertical glue to center the buttons
        layoutPanel.add(Box.createVerticalGlue());

        // Button to trigger label creation
        JButton createButton = new JButton("Create Label");
        createButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Create a new panel for input fields
                JPanel inputPanel = new JPanel();
                inputPanel.setLayout(new GridLayout(3, 2, 5, 5)); // 3 rows, 2 columns, with 10-pixel horizontal and vertical gaps

                // Add labels and text fields to the input panel
                JLabel nameLabel = new JLabel("Name:");
                JTextField nameField = new JTextField(20);
                inputPanel.add(nameLabel);
                inputPanel.add(nameField);

                JLabel descriptionLabel = new JLabel("Description:");
                JTextArea descriptionField = new JTextArea(5, 30);
                descriptionField.setLineWrap(true);
                descriptionField.setWrapStyleWord(true);
                JScrollPane descriptionScrollPane = new JScrollPane(descriptionField);
                inputPanel.add(descriptionLabel);
                inputPanel.add(descriptionScrollPane);

                JLabel valueLabel = new JLabel("Value:");
                JTextField valueField = new JTextField(10);
                inputPanel.add(valueLabel);
                inputPanel.add(valueField);

                // Show the input panel in a JOptionPane
                int result = JOptionPane.showConfirmDialog(layoutPanel, inputPanel, "Create Label", JOptionPane.OK_CANCEL_OPTION);

                // If the user clicks "OK" (Create) in the input panel
                if (result == JOptionPane.OK_OPTION) {
                    String name = nameField.getText();
                    String description = descriptionField.getText();
                    float value = Float.parseFloat(valueField.getText());

                    // Create an instance of LabelGeneratorService
                    LabelGeneratorService labelGeneratorService = new LabelGeneratorService();

                    // Call the method to send the label attributes to the server
                    boolean labelCreated = labelGeneratorService.sendLabelAttributesToServer(name, description, value);

                    if (labelCreated) {
                        // Show a success message dialog
                        JOptionPane.showMessageDialog(layoutPanel, "Label created successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        // Show an error message dialog (if label creation fails)
                        JOptionPane.showMessageDialog(layoutPanel, "Failed to create label.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
        });

        // Add some vertical space between the buttons
        layoutPanel.add(Box.createVerticalStrut(20)); // Increased to 20 pixels between the buttons

        // Button to fetch labels
        JButton fetchButton = new JButton("Fetch Labels");
        fetchButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Call the fetchAndDisplayLabels method to fetch and display labels in the table
                fetchAndDisplayLabels();
            }
        });

        // Add the buttons to the layoutPanel
        layoutPanel.add(createButton);
        layoutPanel.add(fetchButton);

        // Create another vertical glue to center the buttons
        layoutPanel.add(Box.createVerticalGlue());

        return layoutPanel;
    }
    
    private void fetchAndDisplayLabels() {
        // Create an instance of LabelGeneratorService
        LabelGeneratorService labelGeneratorService = new LabelGeneratorService();

        // Call the method to fetch all labels from the server
        List<Label> labels = labelGeneratorService.fetchAllLabelsFromServer();

        // Display the fetched labels in a table
        displayLabelsInTable(labels);
    }
    
    private void displayLabelsInTable(List<Label> labels) {
        JFrame frame = new JFrame("Labels Table");
        frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        frame.setLayout(new BorderLayout());

        // Create the table model using the custom LabelTableModel
        LabelTableModel labelTableModel = new LabelTableModel(labels);

        // Create the JTable with the table model
        JTable labelTable = new JTable(labelTableModel);

        // Add the table to a scroll pane
        JScrollPane scrollPane = new JScrollPane(labelTable);
        frame.add(scrollPane, BorderLayout.CENTER);

        // Button to edit selected label
        JButton editButton = new JButton("Edit Label");
        editButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = labelTable.getSelectedRow();
                if (selectedRow >= 0) {
                    // Get the label data from the selected row in the table using the custom table model
                    Label selectedLabel = labelTableModel.getLabelAt(selectedRow);

                    // Create a new panel for input fields
                    JPanel inputPanel = new JPanel();
                    inputPanel.setLayout(new GridLayout(3, 2, 5, 5)); // 3 rows, 2 columns, with 10-pixel horizontal and vertical gaps

                    // Add labels and text fields to the input panel
                    JLabel nameLabel = new JLabel("Name:");
                    JTextField nameField = new JTextField(selectedLabel.getName(), 20);
                    inputPanel.add(nameLabel);
                    inputPanel.add(nameField);

                    JLabel descriptionLabel = new JLabel("Description:");
                    JTextArea descriptionField = new JTextArea(selectedLabel.getDescription(), 5, 30);
                    descriptionField.setLineWrap(true);
                    descriptionField.setWrapStyleWord(true);
                    JScrollPane descriptionScrollPane = new JScrollPane(descriptionField);
                    inputPanel.add(descriptionLabel);
                    inputPanel.add(descriptionScrollPane);

                    JLabel valueLabel = new JLabel("Value:");
                    JTextField valueField = new JTextField(String.valueOf(selectedLabel.getValue()), 10);
                    inputPanel.add(valueLabel);
                    inputPanel.add(valueField);

                    // Show the input panel in a JOptionPane
                    int result = JOptionPane.showConfirmDialog(frame, inputPanel, "Edit Label", JOptionPane.OK_CANCEL_OPTION);

                    // If the user clicks "OK" (Edit) in the input panel
                    if (result == JOptionPane.OK_OPTION) {
                        // Store the original name before making changes
                        String originalName = selectedLabel.getName();

                        // Update the label data with the edited values
                        selectedLabel.setName(nameField.getText());
                        selectedLabel.setDescription(descriptionField.getText());
                        selectedLabel.setValue(Float.parseFloat(valueField.getText()));

                        
                    
                        LabelGeneratorService labelGeneratorService = new LabelGeneratorService();
                        boolean labelUpdated = labelGeneratorService.updateLabelOnServer(originalName, selectedLabel);

                        if (labelUpdated) {
                            // Show a success message dialog
                            JOptionPane.showMessageDialog(layoutPanel, "Label updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                            // Update the table to reflect the changes
                            labelTableModel.fireTableDataChanged();
                        } else {
                            // Show an error message dialog (if label update fails)
                            JOptionPane.showMessageDialog(layoutPanel, "Failed to update label.", "Error", JOptionPane.ERROR_MESSAGE);
                        }
                    }


                } else {
                    JOptionPane.showMessageDialog(frame, "Please select a label to edit.", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        // Button to delete selected label
        JButton deleteButton = new JButton("Delete Label");
        deleteButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                int selectedRow = labelTable.getSelectedRow();
                LabelGeneratorService labelGeneratorService = new LabelGeneratorService();
                if (selectedRow >= 0) {
                    LabelTableModel labelTableModel = (LabelTableModel) labelTable.getModel();
                    Label selectedLabel = labelTableModel.getLabelAt(selectedRow);

                    // Confirm if the user wants to delete the label
                    int confirmResult = JOptionPane.showConfirmDialog(layoutPanel, "Are you sure you want to delete this label?", "Confirm Delete", JOptionPane.YES_NO_OPTION);
                    if (confirmResult == JOptionPane.YES_OPTION) {
                        // Call the LabelService to delete the label by name
                    	labelGeneratorService.deleteLabelOnServer(selectedLabel.getName());

                        // Remove the label from the table model
                        labelTableModel.removeLabelAt(selectedRow);
                    }
                } else {
                    JOptionPane.showMessageDialog(layoutPanel, "Please select a label to delete.", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });

        // Add the buttons to a panel
        JPanel buttonPanel = new JPanel();
        buttonPanel.add(editButton);
        buttonPanel.add(deleteButton);

        // Add the button panel to the frame
        frame.add(buttonPanel, BorderLayout.SOUTH);

        // Set preferred size and show the frame
        frame.setPreferredSize(new Dimension(600, 400));
        frame.pack();
        frame.setVisible(true);
    }





}
