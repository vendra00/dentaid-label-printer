package com.adasoft.phase.equipment;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JPanel;

import com.datasweep.compatibility.client.ActivitySetStep;
import com.rockwell.library.ftpc.guice.logger.InjectLogger;
import com.rockwell.mes.apps.ebr.ifc.phase.IPhaseCompleter;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.commons.deviation.ifc.IESignatureExecutor;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseExecutor0200;
import com.rockwell.mes.parameter.phasecompletionmode.PhaseCompletionMode0100;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;
import com.rockwell.mes.services.s88.ifc.recipe.IMESPhase;
import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment;


import com.datasweep.compatibility.client.DatasweepException;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.PhaseSystemTriggeredExceptionHandler;
import com.rockwell.mes.commons.base.ifc.exceptions.MESRuntimeException;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.commons.base.ifc.services.ServiceFactory;
import com.rockwell.mes.commons.deviation.ifc.IMESSignature;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord.RiskClass;
import com.rockwell.mes.services.s88.ifc.IS88EquipmentLogbookService;
import com.rockwell.mes.services.s88.ifc.execution.equipment.IMESS88EquipmentLogbook;
import com.rockwell.mes.services.s88.ifc.recipe.IS88ProcessParameterBundle;
import com.rockwell.mes.services.s88equipment.ifc.IMESEquipmentProperty;
import com.rockwell.mes.services.s88equipment.ifc.IMESEquipmentPropertyType;
import com.rockwell.mes.services.s88equipment.ifc.exceptions.S88UnknownAttribute;

import java.awt.Dimension;
import java.util.Iterator;
import java.util.List;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import org.apache.commons.logging.Log;

/**
 * TODO: Please enter the description of this type. This is mandatory!
 * <p>
 * This runtime phase executor skeleton is generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseExecutorEQUIP0100 extends RtPhaseExecutorEQUIP0100Base {

	@InjectLogger
    private Log log;
	private static final int WAIT = 500;
	private RtPhaseViewProperties viewUpdateRunProp;
	private RtPhaseModelEQUIP0100 modelSetMultRtProps;
	private JPanel propertiesPanel = PhaseSwingHelper.createPanel();
    private boolean isAutoComplete;
    private boolean isHidden;
    private boolean successfulChecked = false;
    public static final String RT_PROPERTY_CHANGE = "rdl_RTPropertyChange";
    private IMESS88Equipment eq = this.getIdentifiedEquipmentEntity() != null ? this.getIdentifiedEquipmentEntity().getEquipmentObject() : null;

	
	
	
    /** Message pack for this phase. */
    public static final String MSGPACK = "PhaseEQUIP0100";

    /**
     * Creates the executor for an ACTIVE phase or a COMPLETED phase in case of resume.
     * 
     * @param inPhaseCompleter the object, which shall be used to complete the phase
     * @param inRtPhase the runtime phase to be executed
     */
    public RtPhaseExecutorEQUIP0100(IPhaseCompleter inPhaseCompleter, final IMESRtPhase inRtPhase) {
        super(inPhaseCompleter, inRtPhase);
    }
    
    /**
     * Creates the executor for a PREVIEW phase.
     * 
     * @param inPhase the related phase
     * @param inStep the related activity set step
     */
    public RtPhaseExecutorEQUIP0100(IMESPhase inPhase, ActivitySetStep inStep) {
        super(inPhase, inStep);
    }

    public void createPhaseComponentStart() {
        super.createPhaseComponentStart();
        this.isAutoComplete = PhaseCompletionMode0100.AUTO_COMPLETE.equals(this.getMode().getPhaseCompletionMode());
        this.isHidden = EqSetMultRtPropsParameter.getHidden(this.getHiddenPhaseConfiguration());
        this.modelSetMultRtProps = new RtPhaseModelEQUIP0100(this);
        this.viewUpdateRunProp = new RtPhaseViewProperties(this.modelSetMultRtProps);
        if (this.isPreview()) {
            if (!this.isHidden) {
                this.viewUpdateRunProp.createUI(this.propertiesPanel, this.controlProvider);
            }

            this.controlProvider.register("PROPERTIESPREVIEW", this.propertiesPanel);
        }

        if (this.isActive()) {
            if (this.isAutoComplete && this.performConsistencyChecks(true)) {
                this.successfulChecked = true;
            }

            if (this.isHidden && this.isAutoComplete) {
                if (this.successfulChecked) {
                    this.isHidden = true;
                } else {
                    this.isHidden = false;
                }
            } else {
                this.isHidden = false;
            }

            this.viewUpdateRunProp.createUI(this.propertiesPanel, this.controlProvider);
            this.controlProvider.register("PROPERTIESACTIVE", this.propertiesPanel);
        }

    }
    
    public JComponent createPhaseComponent() {
        JComponent layoutPanel = super.createPhaseComponent();
        if (this.isHidden) {
            Dimension dim = new Dimension(0, 0);
            layoutPanel.setPreferredSize(dim);
        }

        return layoutPanel;
    }

    public void createPhaseComponentEnd() {
        super.createPhaseComponentEnd();
        this.phaseBean.setInstructionText_Label(this.getInstruction() != null ? this.getInstruction().getColumn1() : "");
        if (this.isPreview()) {
            this.propertiesPanel = (JPanel)this.controlProvider.provide("PROPERTIESPREVIEW");
        }

        if (this.eq != null) {
            this.phaseBean.setEntityIdentifier_Label(this.eq.getIdentifier());
            if (this.isActive()) {
                this.propertiesPanel = (JPanel)this.controlProvider.provide("PROPERTIESACTIVE");
                if (this.isAutoComplete && this.successfulChecked) {
                    SwingUtilities.invokeLater(() -> {
                        this.performPhaseCompletion();
                    });
                }
            }
        } else {
            this.phaseBean.setEntityIdentifier_Label("");
        }

        if (this.isCompleted()) {
            this.phaseBean.setPropertyGridCompleted_Label(this.viewUpdateRunProp.setRtPropertyValueGridData(this.getAllRtPhaseData()));
        }

    }

    public void processEvent(PhaseUIBeanSetMultRtProps.BUTTONS buttonEvent) {
        switch (buttonEvent) {
            case THECONFIRMBUTTON:
                this.triggerPhaseCompletion();
            default:
                super.processEvent(buttonEvent);
        }
    }

    public void triggerPhaseCompletion() {
        try {
            Thread.sleep(500L);
        } catch (InterruptedException var2) {
            throw new MESRuntimeException(var2);
        }

        SwingUtilities.invokeLater(() -> {
            if (this.performConsistencyChecks(false)) {
                this.performPhaseCompletion();
            }

        });
    }

    public void exceptionSigned(String checkKey) {
        switch (checkKey) {
            case "MismatchingProperty":
                if (this.modelSetMultRtProps.checkMVConfig(true) && this.modelSetMultRtProps.validateAllAndSetAllPropertiesValuesPhaseData(true)) {
                    this.triggerPhaseCompletion();
                }
                break;
            case "MismatchingPropertyUoM":
                if (this.modelSetMultRtProps.checkMVConfig(true) && this.modelSetMultRtProps.validateAllAndSetAllPropertiesValuesPhaseData(true)) {
                    this.triggerPhaseCompletion();
                }
                break;
            case "ValuesException":
                this.triggerPhaseCompletion();
        }

        super.exceptionSigned(checkKey);
    }

    public String getNavigatorInfoColumn() {
        return this.getRtPhase() != null && this.getRtPhase().getCompleted() != null ? this.getRtPhase().getCompleted().formatRemoveTimeZone() : "";
    }

    public int recordException(String message, Long riskAssessment, String key) {
        return PhaseSystemTriggeredExceptionHandler.recordException(this, message, message, RiskClass.valueOf(riskAssessment), key);
    }

    private void performPhaseCompletion() {
        this.updateRuntimeProperties();
        if (this.hasRtPhaseData()) {
            this.setPhaseOutput();
        } else {
            this.setPhaseOutputNull();
        }

        this.getPhaseCompleter().completePhase();
    }

    private boolean performConsistencyChecks(boolean isSilent) {
        return this.modelSetMultRtProps.checkMismatchingProperty() && this.modelSetMultRtProps.checkPhaseDataProperty(isSilent) && this.modelSetMultRtProps.checkMVConfig(isSilent) ? this.modelSetMultRtProps.validateAllAndSetAllPropertiesValuesPhaseData(isSilent) : false;
    }

    public boolean hasRtPhaseData() {
        IMESRtPhase rtPhase = this.getRtPhase();
        if (rtPhase != null) {
            return rtPhase.getRtPhaseData() != null;
        } else {
            return false;
        }
    }

    public void setPhaseOutput() {
        MESRtPhaseOutputSetMultRtProps0100 phaseOutput = (MESRtPhaseOutputSetMultRtProps0100)this.getRtPhaseOutput();
        Iterator var2 = this.getAllRtPhaseData().iterator();

        while(var2.hasNext()) {
            MESRtPhaseDataSetMultRtProps phaseData = (MESRtPhaseDataSetMultRtProps)var2.next();
            int bundleNumber = 0;

            for(Iterator var5 = this.getDynamicProcessParameterBundlesList().iterator(); var5.hasNext(); ++bundleNumber) {
                IS88ProcessParameterBundle bundle = (IS88ProcessParameterBundle)var5.next();
                if (phaseData.getBundleId().equals(bundle.getUserDefinedIdentifier())) {
                    phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyProperty(bundleNumber), phaseData.getProperty());
                    switch (ParameterBundleType.fromIdentifier(bundle.getInternalIdentifier())) {
                        case RT_MEASUREDVALUE_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getMeasuredValueValue());
                            break;
                        case RT_BIGDECIMAL_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getDecimalValue());
                            break;
                        case RT_LONG_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getLongValue());
                            break;
                        case RT_DURATION_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getDurationValue());
                            break;
                        case RT_BOOLEAN_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getBooleanValue());
                            break;
                        case RT_STRING_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getStringValue());
                            break;
                        case RT_DATETIME_TYPE:
                            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyValue(bundleNumber), phaseData.getDateTimeValue());
                    }
                }
            }
        }

        phaseOutput.setEquipmentEntity(this.eq);
        phaseOutput.setExceptionRecorded(this.isAnyPhaseExceptionSigned());

        try {
            phaseOutput.save();
        } catch (DatasweepException var7) {
            throw new MESRuntimeException(var7);
        }
    }

    public void setPhaseOutputNull() {
        MESRtPhaseOutputSetMultRtProps0100 phaseOutput = (MESRtPhaseOutputSetMultRtProps0100)this.getRtPhaseOutput();
        if (this.eq != null && !this.eq.getIdentifier().isEmpty()) {
            this.addRtPhaseData().setEquipEntityId(this.eq.getIdentifier());
            phaseOutput.setEquipmentEntity(this.eq);
        }

        int bundleNumber = 0;
        Iterator var3 = this.getDynamicProcessParameterBundlesList().iterator();

        while(var3.hasNext()) {
            IS88ProcessParameterBundle bundle = (IS88ProcessParameterBundle)var3.next();
            phaseOutput.setOutputValue(MESRtPhaseOutputSetMultRtProps0100.createValueOutputKeyProperty(bundleNumber++), (Object)null);
        }

        try {
            phaseOutput.setExceptionRecorded(this.isAnyPhaseExceptionSigned());
            phaseOutput.save();
        } catch (DatasweepException var5) {
            throw new MESRuntimeException(var5);
        }
    }

    private boolean isAnyPhaseExceptionSigned() {
        return this.isExceptionSigned("ValuesException") || this.isExceptionSigned("MismatchingProperty") || this.isExceptionSigned("MismatchingPropertyUoM");
    }

    private void updateRuntimeProperties() {
        List<RuntimePropertyData0100> propertyDataList = this.modelSetMultRtProps.getPropertyDataList();
        if (propertyDataList != null) {
            Iterator var2 = propertyDataList.iterator();

            label147:
            while(var2.hasNext()) {
                RuntimePropertyData0100 propertyData = (RuntimePropertyData0100)var2.next();
                IMESEquipmentProperty property = propertyData.getProperty();
                String propertyValueId = propertyData.getPropertyValueId();
                Object propertyClass = null;

                try {
                    propertyClass = property.getAttributeValueClass(propertyValueId);
                } catch (S88UnknownAttribute var23) {
                    this.log.error("Unknown Attribute", var23);
                }

                Object newValue = propertyData.getPropertyValue();
                if (newValue instanceof Long && (9 == property.getDataType().shortValue() || Boolean.class.equals(propertyClass))) {
                    Long newLongValue = (Long)newValue;
                    if (SetMultRtEqPropsChoiceListChoiceList.No.val().equals(newLongValue)) {
                        property.setPropertyValue(false);
                        newValue = Boolean.FALSE;
                    } else if (SetMultRtEqPropsChoiceListChoiceList.Yes.val().equals(newLongValue)) {
                        property.setPropertyValue(true);
                        newValue = Boolean.TRUE;
                    } else {
                        property.setPropertyValue((Object)null);
                        newValue = null;
                    }
                }

                try {
                    Object previousValue = property.getAttributeValue(propertyValueId);
                    previousValue = previousValue != null ? previousValue : "";
                    String previousValueLocalized = previousValue != null ? previousValue.toString() : "";
                    if (previousValue instanceof Boolean) {
                        previousValueLocalized = this.getBooleanChoiceMsg((Boolean)previousValue);
                    } else if (previousValue == null && 9 == property.getDataType().shortValue() || Boolean.class.equals(propertyClass)) {
                        previousValueLocalized = SetMultRtEqPropsChoiceListChoiceList.NA.msg();
                    }

                    String logbookNewValueString = newValue != null ? newValue.toString() : "";
                    String logbookNewValueStringLocalized = logbookNewValueString;
                    if (newValue instanceof Boolean) {
                        logbookNewValueStringLocalized = this.getBooleanChoiceMsg((Boolean)newValue);
                    } else if (newValue == null && 9 == property.getDataType().shortValue() || Boolean.class.equals(propertyClass)) {
                        logbookNewValueStringLocalized = SetMultRtEqPropsChoiceListChoiceList.NA.msg();
                    }

                    String logbookPropertyIdent = property.getIdentifier();
                    IMESEquipmentPropertyType eqPropertyType = property != null ? property.getEquipmentPropertyType() : null;
                    boolean isFlexibleAttributeDefType = eqPropertyType != null && TechnicalEquipmentPropertyTypeChoiceList.FlexibleAttrDef.val().equals(eqPropertyType.getTechnicalTypeForRuntime());
                    if (isFlexibleAttributeDefType) {
                        logbookPropertyIdent = logbookPropertyIdent + "." + propertyValueId;
                    }

                    this.setPropertyValue(property, propertyValueId, newValue);
                    property.Save(PCContext.getCurrentServerTime(), (String)null, PCContext.getDefaultAccessPrivilege());
                    IS88EquipmentLogbookService service = (IS88EquipmentLogbookService)ServiceFactory.getService(IS88EquipmentLogbookService.class);
                    String categoryMeaning = "rdl_RTPropertyChange";
                    if (this.modelSetMultRtProps.getPhaseInputEquipment().equals(property.getParentEquipment()) && this.modelSetMultRtProps.getPhaseInputEquipment().getLogbookEnabled()) {
                        IMESS88EquipmentLogbook logbookEntry = service.writeLogbookEntryOfExtendedCategory(this.modelSetMultRtProps.getPhaseInputEquipment(), this.getRtPhase(), categoryMeaning, "", (IMESSignature)null);
                        logbookEntry.setPropertyTypeIdentifier(logbookPropertyIdent);
                        logbookEntry.setOldState(previousValue.toString());
                        logbookEntry.setOldStateLocalized(previousValueLocalized);
                        logbookEntry.setNewState(logbookNewValueString);
                        logbookEntry.setNewStateLocalized(logbookNewValueStringLocalized);
                        logbookEntry.save();
                    }

                    Iterator var26 = this.modelSetMultRtProps.getBundleList().iterator();

                    while(true) {
                        RtPhaseRuntimeProperty rtPhaseRuntimeProperty;
                        do {
                            do {
                                do {
                                    if (!var26.hasNext()) {
                                        continue label147;
                                    }

                                    IS88ProcessParameterBundle bundle = (IS88ProcessParameterBundle)var26.next();
                                    rtPhaseRuntimeProperty = (RtPhaseRuntimeProperty)this.modelSetMultRtProps.getMapProperty().get(bundle.getUserDefinedIdentifier());
                                } while(!this.modelSetMultRtProps.isEnabledSetRtPropChild(rtPhaseRuntimeProperty));
                            } while(!property.getIdentifier().equals(rtPhaseRuntimeProperty.getPropertyIdentifier()));
                        } while(!propertyData.getPropertyValueId().equals(rtPhaseRuntimeProperty.getPropertyValueIdentifier()));

                        Iterator var20 = this.modelSetMultRtProps.getPhaseInputChildEquipment().iterator();

                        while(var20.hasNext()) {
                            IMESS88Equipment child = (IMESS88Equipment)var20.next();
                            if (child.equals(property.getParentEquipment()) && child.getLogbookEnabled()) {
                                IMESS88EquipmentLogbook childLogbookEntry = service.writeLogbookEntryOfExtendedCategory(child, this.getRtPhase(), categoryMeaning, "", (IMESSignature)null);
                                childLogbookEntry.setPropertyTypeIdentifier(logbookPropertyIdent);
                                childLogbookEntry.setOldState(previousValue.toString());
                                childLogbookEntry.setOldStateLocalized(previousValueLocalized);
                                childLogbookEntry.setNewState(logbookNewValueString);
                                childLogbookEntry.setNewStateLocalized(logbookNewValueStringLocalized);
                                childLogbookEntry.save();
                            }
                        }
                    }
                } catch (DatasweepException | S88UnknownAttribute var24) {
                    throw new MESRuntimeException(var24);
                }
            }
        }

    }

    private <T> void setPropertyValue(IMESEquipmentProperty property, String propertyValueId, Object defaultValue) {
        IMESEquipmentProperty<T> typedProperty = property;
        T value = defaultValue;

        try {
            typedProperty.setAttributeValue(propertyValueId, value);
        } catch (S88UnknownAttribute var7) {
            throw new MESRuntimeException(var7);
        }
    }

    public String getBooleanChoiceMsg(Boolean value) {
        if (value == null) {
            return SetMultRtEqPropsChoiceListChoiceList.NA.msg();
        } else {
            return value ? SetMultRtEqPropsChoiceListChoiceList.Yes.msg() : SetMultRtEqPropsChoiceListChoiceList.No.msg();
        }
    }

}
