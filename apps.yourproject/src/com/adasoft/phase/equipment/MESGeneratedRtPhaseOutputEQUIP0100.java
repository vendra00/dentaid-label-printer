package com.adasoft.phase.equipment;

/**
 * This file is generated by the PhaseGenerator
 *
 * Please do not modify this file manually !!
 */
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.datasweep.compatibility.client.ATRow;
import com.datasweep.compatibility.client.Response;
import com.rockwell.mes.commons.base.ifc.utility.ObjectFactory;
import com.rockwell.mes.services.s88.ifc.library.IBuildingBlockOutputDescriptor;
import com.rockwell.mes.services.s88.ifc.processdata.MESRtPhaseOutput;

import com.rockwell.mes.commons.base.ifc.objects.MESATObjectReferenceFieldHandler;
import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment;
import com.rockwell.mes.commons.base.ifc.objects.PersistentMESATObject;

 /**
 * Generated class definition
 * <br/>Application table: AD_PhOutEQUIP0100
 */
public abstract class MESGeneratedRtPhaseOutputEQUIP0100
 extends MESRtPhaseOutput {

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "AD_PhOutEQUIP0100";

    /** Generated reference field handler */
    private final MESATObjectReferenceFieldHandler<IMESS88Equipment> refEquipmentEntity = 
            MESATObjectReferenceFieldHandler.createReferenceFieldHandler(this, IMESS88Equipment.class, "AD_EquipmentEntity");

    @Override
    public String getATDefinitionName() {
        return ATDEFINITION_NAME;
    }

    /**
     * Generated constructor
     *
     * @param key The key of the ATRow to load.
     */
    public MESGeneratedRtPhaseOutputEQUIP0100(long key) {
        super(key);
    }

    /**
     * Generated copy constructor
     *
     * @param source the source to copy.
     */
    public MESGeneratedRtPhaseOutputEQUIP0100(MESGeneratedRtPhaseOutputEQUIP0100 source) {
        super(source);

        this.refEquipmentEntity.initFromCopyConstructor(source.refEquipmentEntity);
    }

    /**
     * Generated constructor
     *
     * @param baseATRow The ATRow to wrap.
     */
    public MESGeneratedRtPhaseOutputEQUIP0100(ATRow baseATRow) {
        super(baseATRow);
    }

    /**
     * Generated constructor
     */
    public MESGeneratedRtPhaseOutputEQUIP0100() {
        super();
    }

    @Override
    protected void synchronizeAfterATRowRefresh() {
        super.synchronizeAfterATRowRefresh();

        this.refEquipmentEntity.synchronizeAfterATRowRefresh();
    }    
    
    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public byte[] getValues() {
        return (byte[]) this.dgtATRow.getValue("AD_Values");
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setValues(byte[] value) {
        byte[] oldValue = this.getValues();
        this.dgtATRow.setValue("AD_Values", value);
        pcs.firePropertyChange("values", oldValue, value);
    }

    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public IMESS88Equipment getEquipmentEntity() {
        return this.refEquipmentEntity.getReference();
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setEquipmentEntity(IMESS88Equipment value) {
        this.refEquipmentEntity.setReference(value, pcs, "equipmentEntity");
    }

    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public Boolean getExceptionRecorded() {
        return (Boolean) this.dgtATRow.getValue("AD_ExceptionRecorded");
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setExceptionRecorded(Boolean value) {
        Boolean oldValue = this.getExceptionRecorded();
        this.dgtATRow.setValue("AD_ExceptionRecorded", value);
        pcs.firePropertyChange("exceptionRecorded", oldValue, value);
    }

    @Override
    protected Response prepareATRowForSave() {
        // Check if transient references are valid and store the corresponding keys in the ATRow:
        Response res = super.prepareATRowForSave();

        this.refEquipmentEntity.prepareATRowForSave(res);

        return res;
    }

    /** output descriptors */
    private static final List<IBuildingBlockOutputDescriptor> OUTPUT_DESCRIPTORS =
            new ArrayList<IBuildingBlockOutputDescriptor>();

    /**
     * Initializes the output descriptors.
     */
    static {
        IBuildingBlockOutputDescriptor descriptor;

        descriptor = ObjectFactory.getInstance().createObject(IBuildingBlockOutputDescriptor.class,
                           new Class[] { String.class, String.class, Class.class },
                           new Object[] { "Values", "Values", byte[].class }
                          );
        OUTPUT_DESCRIPTORS.add(descriptor);

        descriptor = ObjectFactory.getInstance().createObject(IBuildingBlockOutputDescriptor.class,
                           new Class[] { String.class, String.class, Class.class, Class.class },
                           new Object[] { "EquipmentEntity", "Equipment Entity", IMESS88Equipment.class, PersistentMESATObject.class }
                          );
        OUTPUT_DESCRIPTORS.add(descriptor);

        descriptor = ObjectFactory.getInstance().createObject(IBuildingBlockOutputDescriptor.class,
                           new Class[] { String.class, String.class, Class.class },
                           new Object[] { "ExceptionRecorded", "Exception recorded", Boolean.class }
                          );
        OUTPUT_DESCRIPTORS.add(descriptor);
    }

    /**
     * Retrieves the output descriptors of this class.
     *  
     * @return unmodifiable list of output descriptors
     */
    public static List<IBuildingBlockOutputDescriptor> getOutputDescriptorsOfClass() {
        return Collections.unmodifiableList(OUTPUT_DESCRIPTORS);
    }
    
    @Override
    public List<IBuildingBlockOutputDescriptor> getOutputDescriptors() {
        return getOutputDescriptorsOfClass();
    }
    
}
