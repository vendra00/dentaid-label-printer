package com.adasoft.phase.equipment;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

import java.text.SimpleDateFormat;

import com.adasoft.phase.equipment.RtPhaseRuntimeProperty;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseModel0200;
import com.rockwell.mes.services.s88.ifc.recipe.IS88ProcessParameterBundle;
import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment;
import com.rockwell.ssb.ftps.parameter.eqm.IRuntimePropertyValueConfig0100;

/**
 * TODO: Runtime phase model.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseModelEQUIP0100 {
	
	private List<IS88ProcessParameterBundle> bundleList;
	private RtPhaseExecutorEQUIP0100 executor;
	
	public static final int FIELD_VALIDATION_STATUS_ERROR = -2;
    public static final int FIELD_VALIDATION_STATUS_ERROR_ROLLBACK = -3;
    public static final int FIELD_VALIDATION_INCOMP_UOM_ERROR = -4;
    public static final int FIELD_VALIDATION_STATUS_EXCEPTION = -1;
    public static final int FIELD_VALIDATION_STATUS_OK = 0;
    public static final String KEY_MISMATCHINGPROPERTY_EXC = "MismatchingProperty";
    public static final String KEY_MISMATCHINGPROPERTYUOM_EXC = "MismatchingPropertyUoM";
    public static final String KEY_VALUES_EXC = "ValuesException";
    public static final String USAGE_IDENTIFIER_EQOBJECT = "Identified equipment entity";
    public static final String USAGE_IDENTIFIER_RTPROP_LONG_BUNDLE = "Long";
    public static final String USAGE_IDENTIFIER_RTPROP_STRING_BUNDLE = "String";
    public static final String USAGE_IDENTIFIER_RTPROP_BIGDECIMAL_BUNDLE = "Decimal";
    public static final String USAGE_IDENTIFIER_RTPROP_MEASUREDVALUE_BUNDLE = "Measured Value";
    public static final String USAGE_IDENTIFIER_RTPROP_BOOLEAN_BUNDLE = "Boolean";
    public static final String USAGE_IDENTIFIER_RTPROP_DATETIME_BUNDLE = "Date Time";
    public static final String USAGE_IDENTIFIER_RTPROP_DURATION_BUNDLE = "Duration";
    public static final String BUNDLE_LIMIT_EXCEPTION_PREFIX = "EXC_";
    public static final String DATE_TIME_FORMATS_DSLIST = "mes_DateTimeFormats";
    public static final String FIELD_FORMATS = "mes_FieldFormats";
    
    private List<String> propertyToRemove = new ArrayList();
    
    private boolean checkMismatchingProperty = true;
    private boolean checkUoM = true;
    private boolean rollbackSetPhaseData = false;
    private IMESS88Equipment identifiedEquipment = null;
    private List<IMESS88Equipment> childEquipments = null;
    
    private Map<String, RtPhaseRuntimeProperty> mapProperty;
    private Long higherRiskAssessment;
    private List<RuntimePropertyData0100> propertyDataList;
    private static SimpleDateFormat simpleDateFormat;

    /**
     * @param inPhaseExecutor The phase executor of this model
     */
    protected RtPhaseModelEQUIP0100(final RtPhaseExecutorEQUIP0100 inPhaseExecutor) {
    	this.executor = inPhaseExecutor;
        this.mapProperty = new LinkedHashMap();
        this.identifiedEquipment = this.getPhaseInputEquipment();
        this.childEquipments = this.getPhaseInputChildEquipment();
        this.bundleList = this.executor.getDynamicProcessParameterBundlesList();
        Iterator var2 = this.bundleList.iterator();

        while(var2.hasNext()) {
            IS88ProcessParameterBundle bundle = (IS88ProcessParameterBundle)var2.next();
            IRuntimePropertyValueConfig0100 rtPropValueConfig = getProcessParameterRuntimePropertyValueConfig(bundle);
            if (rtPropValueConfig != null && rtPropValueConfig.getPropertyReference() != null && !rtPropValueConfig.getPropertyReference().equals("")) {
                RtPhaseRuntimeProperty row = new RtPhaseRuntimeProperty(bundle.getInternalIdentifier(), bundle.getUserDefinedIdentifier(), PropertyReferenceHelper.extractIdentifier(rtPropValueConfig.getPropertyReference()), PropertyReferenceHelper.extractValueId(rtPropValueConfig.getPropertyReference()), rtPropValueConfig.getRuntimeValue(), rtPropValueConfig.getLimitConfiguration());
                this.mapProperty.put(bundle.getUserDefinedIdentifier(), row);
            }
        }

        if (!this.executor.getStatus().equals(Status.PREVIEW) && !this.executor.getAllRtPhaseData().isEmpty()) {
            var2 = this.executor.getAllRtPhaseData().iterator();

            while(var2.hasNext()) {
            	MESRtPhaseDataEQUIP0100 data = (MESRtPhaseDataEQUIP0100)var2.next();
                RtPhaseRuntimeProperty property = (RtPhaseRuntimeProperty)this.mapProperty.get(data.getBundleId());
                if (property != null) {
                    property.setPropertyValue(this.getPhaseDataProperty(data, property));
                }
            }
        }
    }
    

    /**
     * @return Returns the executor.
     */
    public RtPhaseExecutorEQUIP0100 getExecutor() {
        return (RtPhaseExecutorEQUIP0100) executor;
    }

}
