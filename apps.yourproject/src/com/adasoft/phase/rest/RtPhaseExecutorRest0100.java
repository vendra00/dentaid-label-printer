package com.adasoft.phase.rest;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.logging.Logger;

import com.adasoft.phase.rest.model.LabelKeyValues;
import com.adasoft.phase.rest.model.LogMsgDialect;
import com.adasoft.phase.rest.model.Request;
import com.adasoft.phase.rest.service.RequestService;
import com.adasoft.phase.rest.service.RequestServiceImpl;
import com.datasweep.compatibility.client.ActivitySetStep;
import com.rockwell.mes.apps.ebr.ifc.phase.IPhaseCompleter;
import com.rockwell.mes.commons.deviation.ifc.IESignatureExecutor;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseExecutor0200;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;
import com.rockwell.mes.services.s88.ifc.recipe.IMESPhase;


/**
 * TODO: Please enter the description of this type. This is mandatory!
 * <p>
 * This runtime phase executor skeleton is generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseExecutorRest0100 extends //
AbstractPhaseExecutor0200<RtPhaseModelRest0100, RtPhaseViewRest0100, //
RtPhaseExceptionViewRest0100, RtPhaseActionViewRest0100> implements ActionListener {

	/** Message pack for this phase. */
	public static final String MSGPACK = "PhaseRest0100";
	private static final Logger LOGGER = Logger.getLogger(RtPhaseExecutorRest0100.class.getName());


	/**
	 * Creates the executor for an ACTIVE phase or a COMPLETED phase in case of resume.
	 * 
	 * @param inPhaseCompleter the object, which shall be used to complete the phase
	 * @param inRtPhase the runtime phase to be executed
	 */
	public RtPhaseExecutorRest0100(final IPhaseCompleter inPhaseCompleter, final IMESRtPhase inRtPhase) {
		super(inPhaseCompleter, inRtPhase);
	}

	/**
	 * Creates the executor for a PREVIEW phase.
	 * 
	 * @param inPhase the related phase
	 * @param inStep the related activity set step
	 */
	public RtPhaseExecutorRest0100(final IMESPhase inPhase, final ActivitySetStep inStep) {
		super(inPhase, inStep);
	}

	@Override
	protected RtPhaseModelRest0100 createModel() {
		return new RtPhaseModelRest0100(this);
	}

	@Override
	protected RtPhaseViewRest0100 createView(RtPhaseModelRest0100 theModel) {
		return new RtPhaseViewRest0100(theModel);
	}

	@Override
	protected RtPhaseExceptionViewRest0100 createExceptionView(RtPhaseModelRest0100 theModel) {
		return new RtPhaseExceptionViewRest0100(theModel);
	}

	@Override
	protected RtPhaseActionViewRest0100 createActionView(RtPhaseModelRest0100 theModel) {
		return new RtPhaseActionViewRest0100(theModel);
	}

	@Override
	protected void performPhaseCompletion() {
		// TODO Auto-generated method stub
	}

	@Override
	protected boolean performPhaseCompletionCheck() {
		// TODO Auto-generated method stub
		return true;
	}


	@Override
	protected void start() {
		LOGGER.info(LogMsgDialect.START_CALL.getMsgDialect());
		RequestService requestService = new RequestServiceImpl();
		String url = null;
		String method = null;
		HashMap<String, String> bodyMap = new HashMap<>();    	  

		for(int i = 0; i< getRtPhase().getParameters().size(); i++) { 
			LOGGER.info(LogMsgDialect.PHASE_KEY_VALUE.getMsgDialect() + getRtPhase().getKey());
			if(getRtPhase().getParameters().get(i).getIdentifier().equalsIgnoreCase(LabelKeyValues.REST_CALL.getLabelKeyValue())) {    			
				method = getRtPhase().getParameters().get(i).getDataAsString();                              
			}    		
			if(getRtPhase().getParameters().get(i).getIdentifier().equalsIgnoreCase(LabelKeyValues.URL.getLabelKeyValue())) {    			
				url = getRtPhase().getParameters().get(i).getDataAsString(); 
			} 
			if(!getRtPhase().getParameters().get(i).getIdentifier().equalsIgnoreCase(LabelKeyValues.URL.getLabelKeyValue()) && !getRtPhase().getParameters().get(i).getIdentifier().equalsIgnoreCase(LabelKeyValues.REST_CALL.getLabelKeyValue())) {    			    			
				String data = getRtPhase().getParameters().get(i).getDataAsString();
				String[] parts = data.split(";", 2); // Split into 2 parts at the first occurrence of ';'
				if (parts.length == 2) { // Ensure that there are exactly 2 parts
					String key = parts[0].trim(); // You might want to trim whitespace
					String value = parts[1].trim();
					bodyMap.put(key, value);
				} else {
					LOGGER.severe(LogMsgDialect.FORMAT_DATA_ERROR.getMsgDialect() + data);
					// Handle the case where the data does not contain the expected delimiter
				}
				LOGGER.info(LogMsgDialect.BODY_NOT_PARSED_VALUES.getMsgDialect() + getRtPhase().getParameters().get(i).getDataAsString());
			}    		
		}  

		Request request = requestService.createRequest(getRtPhase().getKey(), method, url, bodyMap);
		LOGGER.info(LogMsgDialect.CREATED_REQUEST_OBJECT.getMsgDialect() + request.getRequestType().getMethod() + " URL: " + request.getUrl() + " Body: " + bodyMap);
	}

	@Override
	protected void exceptionTransactionCallback(String checkKey, IMESExceptionRecord exceptionRecord, IESignatureExecutor sigExecutor) {
		// TODO Auto-generated method stub
	}
	@Override
	public void actionPerformed(ActionEvent e) {
		// TODO Auto-generated method stub
	}

}
