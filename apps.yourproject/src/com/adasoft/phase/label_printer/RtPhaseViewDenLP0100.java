package com.adasoft.phase.label_printer;

import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.logging.Logger;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingWorker;

import com.adasoft.phase.label_printer.model.Request;
import com.adasoft.phase.label_printer.service.LabelPrinterServiceImpl;
import com.adasoft.phase.label_printer.service.RequestService;
import com.adasoft.phase.label_printer.service.RequestServiceImpl;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.UIConstants;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseMainView0200;
import com.rockwell.mes.commons.shared.phase.viewhelper.swing.LayoutHelper0201;

/**
 * TODO: Runtime phase view.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseViewDenLP0100 extends AbstractPhaseMainView0200<RtPhaseModelDenLP0100> {

    /** Comment for <code>serialVersionUID</code> */
    private static final long serialVersionUID = 1L;
    private static final Logger LOGGER = Logger.getLogger(RtPhaseViewDenLP0100.class.getName());

    /**
     * @param theModel The model of this view
     */
    protected RtPhaseViewDenLP0100(final RtPhaseModelDenLP0100 theModel) {
        super(theModel);
    }

    @Override
    protected String getNavigatorInfoColumn() {
    	LOGGER.info("getNavigatorInfoColumn");
        return null;
    }

    @Override
    protected void createUI() {
        // CHECKSTYLE:MagicNumber:off (Reason: Columns, rows and width up to 3 ...)
    	LOGGER.info("createUI");
        setOpaque(false);
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbConstraints = new GridBagConstraints();

        gbConstraints.anchor = GridBagConstraints.FIRST_LINE_START;
        LayoutHelper0201.setGBConstraints(gbConstraints, 0, 0, 3, 1);
        add(createInstructionPanel(getModel().getInstructionTextColumn1(), LayoutHelper0201.calculatePreferredWidth(gbConstraints)), gbConstraints);

        LayoutHelper0201.setGBConstraints(gbConstraints, 0, 1, 3, 1);
        add(createActionPanel(LayoutHelper0201.calculatePreferredWidth(gbConstraints)),
                gbConstraints);

        gbConstraints.anchor = GridBagConstraints.PAGE_END;
        LayoutHelper0201.setGBConstraints(gbConstraints, 3, 1, 1, 1);
        add(createConfirmPanel(), gbConstraints);

        // CHECKSTYLE:MagicNumber:on
    }

    /**
     * @param preferredWidth the preferred width.
     * @return The action panel
     */
    protected Component createActionPanel(int preferredWidth) {
        LOGGER.info("createActionPanel");
        
        JPanel layoutPanel = PhaseSwingHelper.createPanel();
        ((FlowLayout) layoutPanel.getLayout()).setHgap(UIConstants.DEFAULT_GAP);
        ((FlowLayout) layoutPanel.getLayout()).setVgap(UIConstants.DEFAULT_GAP);
       
        // Create a JLabel to display the result message
        JLabel resultLabel = new JLabel();

        // Add a JButton to the layoutPanel
        JButton printButton = new JButton("Print Label");
        printButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Update the label to show the printing process
                resultLabel.setText("Printing Labels...");
                resultLabel.setForeground(Color.YELLOW);

                // Create a SwingWorker to perform the blocking call in a background thread
                SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                    @Override
                    protected Boolean doInBackground() throws Exception {
                        return callServiceToPrintLabel();
                    }

                    @Override
                    protected void done() {
                        try {
                            boolean result = get();
                            if (result) {
                                resultLabel.setText("Label Print Successful!");
                                resultLabel.setForeground(Color.GREEN);
                            } else {
                                resultLabel.setText("Label Print Failed!");
                                resultLabel.setForeground(Color.RED);
                            }
                        } catch (Exception ex) {                            
                            ex.printStackTrace();
                            resultLabel.setText("Error occurred!");
                            resultLabel.setForeground(Color.RED);
                        }
                    }
                };

                worker.execute();
            }
        });

        layoutPanel.add(printButton);
        layoutPanel.add(resultLabel);

        return layoutPanel;
    }
    
    private boolean callServiceToPrintLabel() {
    	RequestService requestService = new RequestServiceImpl();
		List<Request> requests = requestService.getRequests();
    	LabelPrinterServiceImpl labelPrinterServiceImpl = new LabelPrinterServiceImpl();
    	
    	if(labelPrinterServiceImpl.sendlabelToPrint(requests.get(0)) == true) {
    		return true;
    	} else {
    		return false;
    	}
        
    }

}
